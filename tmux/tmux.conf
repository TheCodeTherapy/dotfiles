# ============================================================================
# === General settings                                                     ===
# ============================================================================
# set -g default-terminal "screen-256color"
# ============================================================================
set-option -ga terminal-overrides ",alacritty*:Tc:smso"
# ============================================================================
set -g repeat-time 300
set -g buffer-limit 20
set -g display-time 1500
set -g history-limit 20000
set -g remain-on-exit off
set -sg escape-time 0
setw -g allow-rename off
setw -g automatic-rename off
setw -g aggressive-resize on
# ============================================================================

# === Change prefix key to C-a ===============================================
unbind C-b
set -g prefix C-a
# ============================================================================

# Set parent terminal title to reflect current window ========================
set -g set-titles on
set -g set-titles-string "#I:#W"
# ============================================================================

# Start index of window/pane with 1 ==========================================
set -g base-index 1
setw -g pane-base-index 1
# ============================================================================

# Toggle TMUX mouse capture ==================================================
bind z set -g mouse \; \
	display-message "TMUX Mouse capture is now #{?mouse, ON, OFF}"
# ============================================================================


# ============================================================================
# === Key bindings                                                         ===
# ============================================================================

# Edit configuration and reload ==============================================
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf &&\
	tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"
# ============================================================================

# Reload tmux configuration ==================================================
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"
# ============================================================================

# Unbind default key bindings, we're going to override =======================
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind }    # swap-pane -D
unbind {    # swap-pane -U
unbind "'"  # select-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
unbind Z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left
unbind [    # paste-buffer
unbind ]


# New window and retain cwd ==================================================
bind c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created ===========================
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window ==================================================
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes ================================================================
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# Select panes ===============================================================
bind -r C-[ previous-window
bind -r C-] next-window
bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+
bind -r Tab last-window   # cycle thru MRU tabs
bind -r = swap-pane -D

# Zoom pane ==================================================================
bind + resize-pane -Z

# Link window ================================================================
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane ====================================
bind \ if '[ #{pane_index} -eq 1 ]' \
     'swap-pane -s "!"' \
     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts =========================================
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows) =====================
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session ========================================================
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Toggle Status bar ==========================================================
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'


# ============================================================================
# === Window monitoring for activity and silence                           ===
# ============================================================================
bind m setw monitor-activity \; \
	display-message 'Monitor activity [#{?monitor-activity,ON,OFF}]'

# Monitor Window silence =====================================================
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles =================================================
set -g visual-activity on


# ============================================================================
# === Copy mode, scroll and clipboard                                      ===
# ============================================================================
set -g @copy_use_osc52_fallback on

# Prefer vi style key table ==================================================
setw -g mode-keys vi

bind p paste-buffer
bind C-p choose-buffer

# Trigger copy mode by =======================================================
bind -n M-Up copy-mode

# Scroll up/down by 1 line, half screen, whole screen ========================
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce scrolled rows per tick to "2" ======
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# wrap default shell in reattach-to-user-namespace if available ==============
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

yank="~/.tmux/yank.sh"

# Copy selected text =========================================================
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not ===
# clear selection. Clear select on subsequence mouse click ===================
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X copy-pipe "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   send-keys -X clear-selection

source ~/dotfiles/tmux/powerline.conf

